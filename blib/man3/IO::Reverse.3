.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "IO::Reverse 3"
.TH IO::Reverse 3 "2024-03-24" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Reverse \- read a file in reverse
.SH "VERSION"
.IX Header "VERSION"
Version 0.02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& Read a file from the end of file, line by line
\&
\& create a test file from the Command Line
\&
\& $  for i in $( seq 1 10 )
\& do
\&   echo "this is $i"
\& done > t.txt
.Ve
.PP
Now a small test script
.PP
.Vb 1
\& use IO::Reverse;
\&
\& my $f = IO::Reverse\->new( 
\&    {
\&       FILENAME => \*(Aq./t.txt\*(Aq
\&    }
\& );
\&
\& while ( my $line = $f\->next ) {
\&        print "$line";
\& }
.Ve
.SH "METHODS"
.IX Header "METHODS"
There are only 2 methods: \fInew()\fR and \fInext()\fR;
.SS "new"
.IX Subsection "new"
.Vb 3
\& my $f = IO::Reverse\->new(
\&    FILENAME => \*(Aq./t.txt\*(Aq
\& );
.Ve
.SS "next"
.IX Subsection "next"
Iterate through the file
.PP
.Vb 3
\& while ( my $line = $f\->next ) {
\&   print "$line";
\& }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jared Still, \f(CW\*(C`<jkstill at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-io\-reverse at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/NoAuth/ReportBug.html?Queue=IO\-Reverse>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc IO::Reverse
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<https://rt.cpan.org/NoAuth/Bugs.html?Dist=IO\-Reverse>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<https://cpanratings.perl.org/d/IO\-Reverse>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<https://metacpan.org/release/IO\-Reverse>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This software is Copyright (c) 2023 by Jared Still.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT License
.Ve
